{
  "openapi": "3.0.3",
  "info": {
    "title": "API for a social network",
    "description": "This API seeks to show some routes and events that exist in a basic social network",
    "termsOfService": "http://localhost:3001/terms",
    "contact": {
      "email": "carlosnatanael.p.j@gmail.com"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:{port}/{basePath}",
      "description": "The development API server",
      "variables": {
        "port": {
          "default": "3001"
        },
        "basePath": {
          "default": "v1"
        }
      }
    },
    {
      "schemes": [
        "https",
        "http"
      ]
    }
  ], 
  "paths": {
    "/security/login": { 
      "post": {
        "summary": "Login user",
        "description": "Route responsible for verifying that the login credentials are in accordance with what is stored in the database. After confirming the existing user, it will generate the access token.",
        "tags": ["Security"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              },
              "examples": {
                "login_user": {
                  "value": {
                    "user": "Usuario",
                    "password": "123"
                  }
                }
              }
            }
          }
        },
        "responses": {}
      }
    },
    "/security/register": {
      "post": {
        "summary": "Register user",
        "description": "Route responsible for registering a user, encrypting the password and saving the credentials in the database with the encrypted password.",
        "tags": ["Security"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              },
              "examples": {
                "register_user": {
                  "value": {
                    "user": "Usuario",
                    "email": "usuario@email.com",
                    "password": "123",
                    "profile": {
                      "name": "Nome do perfil"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {}
      }
    },
    "/profiles": {
      "get": {
        "summary": "List profiles",
        "description": "Route responsible for listing the existing profiles in the application.",
        "tags": ["Profiles"],
        "operationId": "listProfiles",
        "responses": {},
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/profiles/{profileId}/follow": {
      "post": {
        "summary": "Follow or unfollow Profile",
        "description": "This route will be responsible for following or unfollowing a profile.",
        "tags": ["Profiles"],
        "operationId": "followProfile",
        "parameters": [
          {
            "name": "profileId",
            "in": "path",
            "description": "post by id",
            "required": true
          }
        ],
        "responses": {},
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/posts": {
      "get":{
        "summary": "List posts",
        "description": "List all profile created posts.",
        "tags": ["Posts"],
        "operationId":"listPosts",
        "responses": {},
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create a new post",
        "description": "This route will be responsible for creating a new post.",
        "tags": ["Posts"],
        "operationId": "createPost",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Post"
              },
              "examples": {
                "new_post":{
                  "summary": "post exemple",
                  "value": {
                    "title": "PostSwaggerTitle",
                    "description": "PostSwaggerDescription"
                  }
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "required": true
                  },
                  "description": {
                    "type": "string",
                    "required": true
                  },
                  "file": {
                    "type": "file"
                  }
                }
              }
            }
          }
        },
        "responses": {},
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/posts/{postId}": {
      "get": {
        "summary":"List post by id",
        "description" : "Search the post using the id parameter",
        "tags":["Posts"],
        "parameters": [
          {
            "name": "postById",
            "in": "path",
            "description": "Post by id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary":"Delete post",
        "description" : "Delete post via id parameter.",
        "tags":["Posts"],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Delete post by id",
            "required": true
          }
        ],
        "responses": {},
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put":{
        "summary": "Update post",
        "description": "Route responsible for updating information of an existing post.",
        "tags": ["Posts"],
        "operationId": "updatePost",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Update post by id",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Post"
              },
              "examples": {
                "update_post":{
                  "summary": "Example of data to be updated from a post",
                  "value": {
                    "title": "TestUpdatePostSwaggerTitle",
                    "description": "TestUpdatePostSwaggerDescription"
                  }
                }
              }
            }
          }
        },
        "responses": {},
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/posts/{postId}/like": {
      "post": {
        "summary": "Like or Unlike post",
        "description": "This route will be responsible for giving likes and unlikes to a certain post.",
        "tags": ["Posts"],
        "operationId": "likePost",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Like or unlike post by id",
            "required": true
          }
        ],
        "responses": {},
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/posts/{postId}/comments": {
      "get": {
        "summary": "List comments",
        "description": "Route responsible for fetching all comments from a profile on a given post.",
        "tags": ["Comments"],
        "operationId":"listComments",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "List comments by post id",
            "required": true
          }
        ],
        "responses": {},
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create comment",
        "description": "This route will be responsible for creating a new comment on a post.",
        "tags": ["Comments"],
        "operationId": "createComment",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Post by id",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              },
              "examples": {
                "comment_post":{
                  "summary": "comment example",
                  "value": {
                    "description": "TestCommentSwaggerDescription"
                  }
                }
              }
            }
          }
        },
        "responses": {},
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/posts/{postId}/comments/{commentId}": {
      "get": {
        "summary":"List comment",
        "description" : "Search for a comment by post id and comment id.",
        "tags":["Comments"],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Post by id",
            "required": true
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "Comment by id",
            "required": true
          }

        ],
        "responses": {},
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "summary": "Update comment",
        "description": "This route will be responsible for updating an existing comment on a post.",
        "tags": ["Comments"],
        "operationId": "updateComment",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Post by id",
            "required": true
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "Comment by id",
            "required": true
          }

        ],
        "requestBody":{
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              },
              "examples": {
                "post":{
                  "summary": "Comment example",
                  "value": {
                    "description": "Update comment swagger description"
                  }
                }
              }
            }
          }
        },
        "responses": {},
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary":"Delete comment",
        "description" : "Delete comment via id parameter.",
        "tags":["Comments"],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Post by id",
            "required": true
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "Comment by id",
            "required": true
          }

        ],
        "responses": {},
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/posts/{postId}/comments/{commentId}/like": {
      "post": {
        "summary": "Like or unlike comment",
        "description": "This route will be responsible for liking or disliking a given comment",
        "tags": ["Comments"],
        "operationId": "LikeComment",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Post by id",
            "required": true
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "Comment by id",
            "required": true
          }

        ],
        "responses": {},
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Post":{
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "required": true
          },
          "description": {
            "type": "string",
            "required": true
          },
          "image": {
            "type": "boolean"          },
          "imagePath": {
            "type": "string"
          },
          "profile": {
            "type": "object",
            "$ref": "#/components/schemas/Profile"
          },
          "comments": {
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/Comment"
            }
          },
          "likes": {
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/Profile"
            }
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "user": {
            "type": "string",
            "description": "Enter the user",
            "required": true
          },
          "password": {
            "type": "string",
            "description": "Type the password",
            "required": true
          },
          "email" : {
            "type": "string",
            "description": "Type your e-mail",
            "minLength": 2
          },
          "profile": {
            "type": "object",
            "$ref": "#/components/schemas/Profile"
          }
        }
      },
      "Profile": {
        "type":"object",
        "properties": {
          "name": {
            "type": "string",
            "required": true,
            "minLength": 2
          },
          "image": {
            "type": "boolean",
            "default": false
          },
          "imageUrl": {
            "type": "string",
            "minLength": 2
          },
          "user": {
            "required": true,
            "type": "object",
            "$ref": "#/components/schemas/User"
          },
          "following": {
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/Profile"
            }
          },
          "followers": {
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/Profile"
            }
          }
        }
      },
      "Comment":{
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "required": true,
            "minLength": 2
          },
          "post": {
            "type": "object",
            "$ref": "#/components/schemas/Post"
          },
          "profile": {
            "type": "object",
            "$ref": "#/components/schemas/Profile"
          },
          "likes": {
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/Profile"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description":"Insira o token JWT"
      }
    }
  }
}


